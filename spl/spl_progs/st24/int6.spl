breakpoint;
alias pt_sst R2;
pt_sst = PROCESS_TABLE + ([SYSTEM_STATUS_TABLE + 1] * 16);

//MODE FLAG IN PROCESS TABLE
[pt_sst + 9] = 7; 

//SP
alias userSP R1;
userSP = SP;

//USER TO KERNEL STACK
[pt_sst +13] =userSP;
SP = [pt_sst + 11]* 512 -1;

//arguments
// alias physicalPageNum R5;
// alias offset R6;
// alias fileDescPhysicalAddr R4;
// physicalPageNum  = [PTBR+2*((userSP-4)/512)];
// offset = (userSP-4)%512;
// fileDescPhysicalAddr = (physicalPageNum *512)  + offset;

alias file_desc R3;
file_desc = [[PTBR+2*((userSP-4)/512)]*512 + ((userSP-4)%512)];

alias return_address R4;
return_address = ([PTBR + 2*((userSP-1)/512)]*512) + ((userSP-1)%512);

alias address R5;
address = [[PTBR + 2*((userSP-3)/512)]*512 + ((userSP-3)%512)];
    
//check
if(file_desc != -1)
then //read from file

	if(file_desc<0 || file_desc>7) then //invalid file fileDesc
		[return_address] = -1;
		[pt_sst + 9] = 0;
		SP = userSP;
		ireturn;
	endif;

	//Locate per process resource table
	alias pprt R6;
	pprt = [pt_sst + 11]*512 + RESOURCE_TABLE_OFFSET + 2*file_desc;
	
	//if pprt not valid or not file
	if([pprt] != FILE) then
		[return_address] = -1;
		[pt_sst + 9] = 0;
		SP = userSP;
		ireturn;
	endif;

	//Get open file table index
	alias oft_i R7;
	oft_i = [pprt + 1];
	alias oft_start R8;
	oft_start = OPEN_FILE_TABLE + oft_i*4;

	//Get inode index
	alias inode_i R9;
	inode_i = [oft_start];

	//Acquire lock on file
	multipush(R1,R2,R3,R4,R5,R6,R7,R8,R9);
	R1 = ACQUIRE_INODE;
	R2 = inode_i;
	R3 = [SYSTEM_STATUS_TABLE + 1];
	call RESOURCE_MANAGER; // Mod 0
	multipop(R1,R2,R3,R4,R5,R6,R7,R8,R9);
	
	//If it fails, return -1
	if(R0 == -1) then
		[return_address] = -1;
		[pt_sst + 9] = 0;
		SP = userSP;
		ireturn;
	endif;

	//Get lseek position from open file table
	alias lseek R10;
	lseek = [oft_start + 2];

	//If root file
	if(inode_i==INODE_ROOT) then
		//If lseek position is equal to file size(480)
		//release inode() , return -2
		if(lseek == 480) then
			multipush(R1,R2,R3,R4,R5,R6,R7,R8,R9,R10);
			R1 = RELEASE_INODE;
			R2 = inode_i;
			R3 = [SYSTEM_STATUS_TABLE + 1];
			call RESOURCE_MANAGER; // Mod 0
			multipop(R1,R2,R3,R4,R5,R6,R7,R8,R9,R10);
			[return_address] = -2;
			[pt_sst + 9] = 0;
			SP = userSP;
			ireturn;
		endif;
		//read from the word at lseek position
		[[PTBR + 2*(address/512)]*512 + (address%512)] = [ROOT_FILE + lseek];
		//Increment lseek position
		[oft_start + 2] = lseek + 1;
	else
		//If lseek position is same as the file size, 
		//release_inode() and return -2.
		if(lseek == [INODE_TABLE + inode_i*16 + 2]) then
			multipush(R1,R2,R3,R4,R5,R6,R7,R8,R9,R10);
			R1 = RELEASE_INODE;
			R2 = inode_i;
			R3 = [SYSTEM_STATUS_TABLE + 1];
			call RESOURCE_MANAGER; // Mod 0
			multipop(R1,R2,R3,R4,R5,R6,R7,R8,R9,R10);
			[return_address] = -2;
			[pt_sst + 9] = 0;
			SP = userSP;
			ireturn;
		endif;

		//Find disk block number and position from which is read
		alias disk_block R6;
		disk_block = lseek/512;
		disk_block = [INODE_TABLE + inode_i*16 + 8 + disk_block];
		alias disk_offset R7;
		disk_offset = lseek%512;
		
		// Read the data from the File Buffer 
		// by calling the buffered_read() function 
		// in the File Manager module.
		multipush(R1,R2,R3,R4,R5,R6,R7,R8,R9,R10);
		R1 = BUFFERED_READ;
		R2 = disk_block;
		R3 = disk_offset;
		R4 = address;
		call FILE_MANAGER; // Mod 3
		multipop(R1,R2,R3,R4,R5,R6,R7,R8,R9,R10);


		//Increment lseek position
		[oft_start + 2] = lseek + 1;
	
	endif;
	//Release lock on file
	multipush(R1,R2,R3,R4,R5,R6,R7,R8,R9,R10);
	R1 = RELEASE_INODE;
	R2 = inode_i;
	R3 = [SYSTEM_STATUS_TABLE + 1];
	call RESOURCE_MANAGER; // Mod 0
	multipop(R1,R2,R3,R4,R5,R6,R7,R8,R9,R10);
	[return_address] = 0;
	[pt_sst + 9] = 0;
	SP = userSP;
	ireturn;

	
else //read from terminal
	
    multipush(R1,R2,R3,R4,R5);
    R1=4;
	R2 = [SYSTEM_STATUS_TABLE + 1];
	R3 = address;  // ##careful here
	call MOD_4; //device manager    
    multipop(R1,R2,R3,R4,R5);

    [return_address] = 0;
endif;

//mode flag
[pt_sst+9] = 0;

//USER STACK
SP = userSP;

ireturn;