//FILE MANAGER

alias fnno R1;

//Open fn -- 3
if(fnno == OPEN)  then
    alias file_name R2;
    
    //find inode index of file
    alias inode_i R3;
    inode_i = 0;
    while(inode_i< MAX_FILE_NUM) do
        if([INODE_TABLE + inode_i*16 + 1]==file_name) then
            break;
        endif;
        inode_i = inode_i + 1;
    endwhile;

    //entry not found in inode table =>
    //return -1;
    if(inode_i == MAX_FILE_NUM)     then
        R0 = -1;
        return;
    endif;

    //Call the acquire_inode() function in the Resource Manager module. 
    // Lock the inode 
    multipush(R1,R2,R3);
    R1 = ACQUIRE_INODE;
    R2 = inode_i;
    R3 = [SYSTEM_STATUS_TABLE+1];
    call RESOURCE_MANAGER; //MOD 0
    multipop(R1,R2,R3);

    //if locking fails return -1
    if(R0==-1)  then
        return;
    endif;

    //if file type is EXEC,
    //release inode
    //return -1; 
    //ONLY DATA FILES can be opened
    if([INODE_TABLE + inode_i*16]==EXEC) then
        R1 = RELEASE_INODE;
        R2 = inode_i;
        R3 = [SYSTEM_STATUS_TABLE+1];
        call RESOURCE_MANAGER; //MOD 0
        R0 = -1;
        return;
    endif;

    //Find free entry in Open File Table
    //no free entries -- release inode, return -2
    R4 = OPEN_FILE_TABLE;
    R5 = OPEN_FILE_TABLE + MAX_OPENFILE_NUM*4;
    while(R4<R5) do
        if([R4] == -1) then
            break;
        endif;
        R4 =R4+4;
    endwhile;

    if(R4 == R5) then
        R1 = RELEASE_INODE;
        R2 = inode_i;
        R3 = [SYSTEM_STATUS_TABLE+1];
        call RESOURCE_MANAGER; //MOD 0
        R0 = -2;
        return;
    endif;
    R5= R4;
    R6 = R4 - OPEN_FILE_TABLE;
    R4= R6/4;                   //to get index
    alias open_file_table_i R4;

    //if file name is root 
    //Set the INODE INDEX field 
    //in the open file table entry 
    //to INODE_ROOT
    if(file_name == "root") then
        [R5] = INODE_ROOT;
    else
        //Set the INODE INDEX field in the open file table entry to the inode table index of the file. 
        [R5] = inode_i;

        //In the File Status Table, if the File Open Count is -1, set it to 1. Otherwise, increment the File Open Count.
        R6 = FILE_STATUS_TABLE + inode_i*4 + 1;
        if([R6] == -1) then
            [R6] = 1;
        else
            [R6] = [R6] + 1;
        endif;
    endif;

    //Set the open instance count to 1 and LSEEK to 0 in the open file table
    [R5+1]=1;
    [R5+2]=0;

    // Call the release_inode() function in the Resource Manager module.   /* Free the inode */
    multipush(R4);
    R1 = RELEASE_INODE;
    R2 = inode_i;
    R3 = [SYSTEM_STATUS_TABLE+1];
    call RESOURCE_MANAGER; // MOD 0
    multipop(R4);

    // return the Open File Table Index.
    R0 = open_file_table_i;
    return;
endif;

//CLOSE -- 4
if(fnno == CLOSE) then
    
endif;
return;