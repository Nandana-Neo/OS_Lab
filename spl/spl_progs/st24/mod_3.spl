//FILE MANAGER

alias fnno R1;

//Open fn -- 3
if(fnno == OPEN)  then
    alias file_name R2;
    
    //find inode index of file
    alias inode_i R3;
    inode_i = 0;
    while(inode_i< MAX_FILE_NUM) do
        if([INODE_TABLE + inode_i*16 + 1]==file_name) then
            break;
        endif;
        inode_i = inode_i + 1;
    endwhile;

    //entry not found in inode table =>
    //return -1;
    if(inode_i == MAX_FILE_NUM)     then
        R0 = -1;
        return;
    endif;

    //Call the acquire_inode() function in the Resource Manager module. 
    // Lock the inode 
    multipush(R1,R2,R3);
    R1 = ACQUIRE_INODE;
    R2 = inode_i;
    R3 = [SYSTEM_STATUS_TABLE+1];
    call RESOURCE_MANAGER; //MOD 0
    multipop(R1,R2,R3);

    //if locking fails return -1
    if(R0==-1)  then
        return;
    endif;

    //if file type is EXEC,
    //release inode
    //return -1; 
    //ONLY DATA FILES can be opened
    if([INODE_TABLE + inode_i*16]==EXEC) then
        R1 = RELEASE_INODE;
        R2 = inode_i;
        R3 = [SYSTEM_STATUS_TABLE+1];
        call RESOURCE_MANAGER; //MOD 0
        R0 = -1;
        return;
    endif;

    //Find free entry in Open File Table
    //no free entries -- release inode, return -2
    R4 = OPEN_FILE_TABLE;
    R5 = OPEN_FILE_TABLE + MAX_OPENFILE_NUM*4;
    while(R4<R5) do
        if([R4] == -1) then
            break;
        endif;
        R4 =R4+4;
    endwhile;

    if(R4 == R5) then
        R1 = RELEASE_INODE;
        R2 = inode_i;
        R3 = [SYSTEM_STATUS_TABLE+1];
        call RESOURCE_MANAGER; //MOD 0
        R0 = -2;
        return;
    endif;
    R5= R4;
    R6 = R4 - OPEN_FILE_TABLE;
    R4= R6/4;                   //to get index
    alias open_file_table_i R4;

    //if file name is root 
    //Set the INODE INDEX field 
    //in the open file table entry 
    //to INODE_ROOT
    if(file_name == "root") then
        [R5] = INODE_ROOT;
    else
        //Set the INODE INDEX field in the open file table entry to the inode table index of the file. 
        [R5] = inode_i;

        //In the File Status Table, if the File Open Count is -1, set it to 1. Otherwise, increment the File Open Count.
        R6 = FILE_STATUS_TABLE + inode_i*4 + 1;
        if([R6] == -1) then
            [R6] = 1;
        else
            [R6] = [R6] + 1;
        endif;
    endif;

    //Set the open instance count to 1 and LSEEK to 0 in the open file table
    [R5+1]=1;
    [R5+2]=0;

    // Call the release_inode() function in the Resource Manager module.   /* Free the inode */
    multipush(R4);
    R1 = RELEASE_INODE;
    R2 = inode_i;
    R3 = [SYSTEM_STATUS_TABLE+1];
    call RESOURCE_MANAGER; // MOD 0
    multipop(R4);

    // return the Open File Table Index.
    R0 = open_file_table_i;
    return;
endif;

//CLOSE -- 4
if(fnno == CLOSE) then
    alias open_file_table_i R2;
    alias PID R3;
    alias inode_i R4;
    alias open_file_table_offset R5;

    // Find the index of the Inode Table
    open_file_table_offset = OPEN_FILE_TABLE + open_file_table_i*4;
    inode_i = [open_file_table_offset];

    // In the Open File Table Entry, decrement the Open Instance Count.
    [open_file_table_offset+1] = [open_file_table_offset+1] -1;

    // If the Open Instance Count becomes 0
    if([open_file_table_offset+1] == 0) then
        //     Invalidate the entry by setting all fields to -1.
        [open_file_table_offset] = -1;
        [open_file_table_offset+1] = -1;
        [open_file_table_offset+2] = -1;
        [open_file_table_offset+3] = -1;

        R6 = FILE_STATUS_TABLE + inode_i*4 + 1;
        //     If the file is not the "root", decrement the File Open Count in the File (Inode) Status Table.
        if([INODE_TABLE + inode_i*16] != ROOT ) then
            [R6] = [R6] - 1;
        endif;
        //     If the File Open Count in File Status Table becomes 0, set it to -1.
        if([R6]==0) then
            [R6]=-1;
        endif;
    endif;

    // return;
    return;

endif;

//Buffered read -- 2
if(fnno == BUFFERED_READ) then
    alias disk_block_n R2;
    alias disk_offset R3;
    alias address R4;

    //Identify buffer
    alias buffer_n R5;
    buffer_n = disk_block_n % 4;

    //Acquire buffer
    multipush(R1,R2,R3,R4,R5);
    R1 = ACQUIRE_BUFFER;
    R2 = buffer_n;
    R3 = [SYSTEM_STATUS_TABLE+1];
    call RESOURCE_MANAGER; //MOD 0
    multipop(R1,R2,R3,R4,R5);

    R6 =BUFFER_TABLE + buffer_n*4;
    //if buffer contains a dofferent disk block
    if([R6]!=disk_block_n) then
        //if contents are dirty
        if([R6 + 1]==1) then
            //Write back content of buffer to disk using disk_store()
            multipush(R1,R2,R3,R4,R5,R6);
            R1 = DISK_STORE;
            R3 = 71 + buffer_n;             //pgno
            R4 = [R6];                      //disk no
            R2 = [SYSTEM_STATUS_TABLE + 1]; //pid
            call  DEVICE_MANAGER; //MOD 4
            multipop(R1,R2,R3,R4,R5,R6);
            //Mark buffer as clean
            [R6 + 1]=0;
        endif;

        //load req disk block into buffor using disk load
        multipush(R1,R2,R3,R4,R5,R6);
        R1 = DISK_LOAD;
        R3 = 71 + buffer_n;             //pg no
        R4 = disk_block_n;              //block no
        R2 = [SYSTEM_STATUS_TABLE+1];   //pid
        call DEVICE_MANAGER; // MOD 4
        multipop(R1,R2,R3,R4,R5,R6);

        //Set new disk block no in buffer table entry
        [R6] = disk_block_n;
    endif;

    //Copy contents in offset location to physical address given as input
    [[[PROCESS_TABLE + [SYSTEM_STATUS_TABLE+1]*16 + 14] + 2*(address/512)]*512 + (address%512)] = [(71+buffer_n)*512 + disk_offset];

    //release buffer
    multipush(R1,R2,R3,R4,R5,R6);
    R1 = RELEASE_BUFFER;
    R2 = buffer_n;
    R3 = [SYSTEM_STATUS_TABLE+1];
    call RESOURCE_MANAGER; //MOD 0
    multipop(R1,R2,R3,R4,R5,R6);

    return;
endif;
return;