//MODE FLAG IN PROCESS TABLE
[PROCESS_TABLE + ([SYSTEM_STATUS_TABLE + 1] * 16) + 9] = 7; 
//SP
alias userSP R0;
userSP = SP;
//USER TO KERNEL STACK
[PROCESS_TABLE + ([SYSTEM_STATUS_TABLE +1] * 16) +13] =userSP;
SP = [PROCESS_TABLE + ([SYSTEM_STATUS_TABLE+1] * 16) + 11]* 512 -1;
//arguments
alias physicalPageNum R1;
alias offset R2;
alias fileDescPhysicalAddr R3;
physicalPageNum  = [PTBR+2*((userSP-4)/512)];
offset = (userSP-4)%512;
fileDescPhysicalAddr = (physicalPageNum *512)  + offset;
alias fileDescriptor R4;
fileDescriptor = [fileDescPhysicalAddr];

//check
if(fileDescriptor != -1)
then
	//code when arg 1 is not valid
	alias physicalAddrRetVal R5;
	physicalAddrRetVal = ([PTBR + 2*((userSP-1)/512)]*512) + ((userSP-1)%512);
	[physicalAddrRetVal] = -1;
else
	//code when arg1 is valid
	alias address R5;
	address = [[PTBR + 2*((userSP-3)/512)]*512 + ((userSP-3)%512)];
    
    multipush(R0,R1,R2,R3,R4,R5,R6);
    R1=4;
	R2 = [SYSTEM_STATUS_TABLE + 1];
	R3 = address;  // ##careful here
	call MOD_4; //device manager    
    multipop(R0,R1,R2,R3,R4,R5,R6);

	alias physicalAddrRetVal R6;
    physicalAddrRetVal = ([PTBR + 2*((userSP-1)/512)]*512) + ((userSP-1)%512);
    [physicalAddrRetVal] = 0;
endif;

//mode flag
[PROCESS_TABLE + ([SYSTEM_STATUS_TABLE+1]*16)+9] = 0;

//USER STACK
SP = userSP;

ireturn;