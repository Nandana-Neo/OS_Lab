alias userSP R1;
userSP = SP;

//switch to kernel stack
alias pt_sst R2;
pt_sst = PROCESS_TABLE + ([SYSTEM_STATUS_TABLE +1] * 16);
[pt_sst + 13] = SP;
SP = [pt_sst + 11]*512 - 1;

R9 = [pt_sst + 14];
//extract syscall no
alias syscall_no R3;
R3 = userSP -5;
syscall_no = [[R9 + (R3/512)*2]*512 + (R3%512) ];

//mode FLAG
[pt_sst + 9] = syscall_no;

alias  file_name R4;
file_name = [[R9 + ((userSP-4)/512)*2]*512 + (userSP-4)%512 ];

//Create -1
if(syscall_no == INT_CREATE) then
    
    alias permissions R5;
    permissions = [[R9 + ((userSP-3)/512)*2]*512 + (userSP-3)%512 ];
    
    //if file present in system(check  inode table) => return 0
    alias inode_table_i R6;
    inode_table_i = 0;
    while(inode_table_i< MAX_FILE_NUM) do
        if([INODE_TABLE + inode_table_i*16 + 1]==file_name) then //already present
            [[R9 + ((userSP -1)/512)*2]*512 + (userSP -1)%512] = 0; //RETURN value
            [pt_sst + 9] = 0;//mode flag reset
            SP = userSP;//switch to user stack
            ireturn;
        endif;
        inode_table_i = inode_table_i + 1;
    endwhile;

    //find free entry in inode table
    inode_table_i = 0;
    while(inode_table_i< MAX_FILE_NUM) do
        if([INODE_TABLE + inode_table_i*16 + 1]==-1) then
            break;
        endif;
        inode_table_i = inode_table_i + 1;
    endwhile;

    //if no free entry, return -1
    if(inode_table_i == MAX_FILE_NUM) then
        [[R9 + ((userSP -1)/512)*2]*512 + (userSP -1)%512] = -1; //RETURN value
        [pt_sst + 9] = 0;//mode flag reset
        SP = userSP;//switch to user stack
        ireturn;
    endif;

    //In the Inode Table entry found above, set FILE NAME to the given file name, FILE SIZE to 0 and FILE TYPE to DATA.
    R7=INODE_TABLE + inode_table_i*16 ;
    [R7 + 1] = file_name;   //name
    [R7 + 2] = 0;           //size
    [R7 + 0] = DATA;        //type
    //Set block nos to-1 -- no blocks allocated yet
    [R7 + 8] = -1;
    [R7 + 9] = -1;
    [R7 + 10] = -1;
    [R7 + 11] = -1;
    //Set userid
    [R7 + 3] = [pt_sst + 3];
    //Set permissions
    [R7 + 4] = permissions;

    //Root file parameters
    R8=ROOT_FILE + inode_table_i*8 ;
    [R8 + 0] = file_name; //name
    [R8 + 1] = 0; //size
    [R8 + 2] = DATA; //type
    [R8 + 3] = [USER_TABLE + 2*[pt_sst + 3]];//username
    [R8 + 4] = permissions;
    
    //Return 0
    [[R9 + ((userSP -1)/512)*2]*512 + (userSP -1)%512] = 0; //RETURN value -- success
    [pt_sst + 9] = 0;//mode flag reset

    SP = userSP;//switch to user stack
    ireturn;
endif;

//delete - 4
if(syscall_no == INT_DELETE) then
    breakpoint;
    //find indexof file in  inode table
    alias inode_table_i R5;
    inode_table_i = 0;
    while(inode_table_i< MAX_FILE_NUM) do
        if([INODE_TABLE + inode_table_i*16 + 1]==file_name) then
            break;
        endif;
        inode_table_i = inode_table_i + 1;
    endwhile;

    //if file not present return 0 -- Success
    if(inode_table_i == MAX_FILE_NUM) then
        [[R9 + ((userSP -1)/512)*2]*512 + (userSP -1)%512] = 0; //RETURN value
        [pt_sst + 9] = 0;//mode flag reset
        SP = userSP;//switch to user stack
        ireturn;
    endif;
    //if file not  data file, return -1
    if([INODE_TABLE + inode_table_i*16 + 0] != DATA) then
        [[R9 + ((userSP-1)/512)*2]*512 + (userSP-1)%512] = -1; //RETURN value
        [pt_sst + 9] = 0; //mode falg
        SP = userSP;//switch to user stack
        ireturn;
    endif;

    //if exclusive permission
    if([INODE_TABLE + inode_table_i*16 + 4] == EXCLUSIVE) then
        //if the current user is not root and the current user does not own the file return -1
        if(([pt_sst + 3]!=ROOT)  && ([pt_sst + 3] != [INODE_TABLE + inode_table_i*16 + 3]))  then
            [[R9 + ((userSP-1)/512)*2]*512 + (userSP-1)%512] = -1; //RETURN value
            [pt_sst + 9] = 0; //mode falg
            SP = userSP;//switch to user stack
            ireturn;
        endif;
    endif;

    //Acquire lock
    multipush(R1,R2,R3,R4,R5,R9);
    R1=ACQUIRE_INODE;//FN NO 4
    R2=inode_table_i;
    R3=[SYSTEM_STATUS_TABLE + 1]; //pid
    call RESOURCE_MANAGER; //MOD 0
    multipop(R1,R2,R3,R4,R5,R9);

    //check if file open count is  -1 -- else-- release lock and return -2
    if([FILE_STATUS_TABLE + inode_table_i*4 + 1] !=-1) then
        multipush(R1,R2,R3,R4,R5,R9);
        R1=RELEASE_INODE;//FN NO 5
        R2=inode_table_i;
        R3=[SYSTEM_STATUS_TABLE + 1]; //pid
        call RESOURCE_MANAGER; //MOD 0
        multipop(R1,R2,R3,R4,R5,R9);
        [[R9 + ((userSP-1)/512)*2]*512 + (userSP-1)%512] = -2; //RETURN value
        [pt_sst + 9] = 0; //mode falg
        SP = userSP;//switch to user stack
        ireturn;
    endif;

    //release each  of the blocks allocated (check  buffer table also)
    R6=0;
    while(R6<4) do
        R7=[INODE_TABLE + inode_table_i*16 + 8 + R6];//disk  no
        if(R7!= -1) then
            //reset buffer  table
            if([BUFFER_TABLE + (R7%4)*4]==R7) then
                [BUFFER_TABLE + (R7%4)*4 + 1] = 0;
            endif;
            //release block
            multipush(R1,R2,R3,R4,R5,R6,R7,R9);
            R1 = RELEASE_BLOCK; //fn no 4
            R2 = R7;    //block no
            R3 = [SYSTEM_STATUS_TABLE + 1]; //pid
            call MEMORY_MANAGER; //MOD 2
            multipop(R1,R2,R3,R4,R5,R6,R7,R9);
        endif;
        R6=R6+1;
    endwhile;
    //invalidate inode table
    [INODE_TABLE + inode_table_i*16 + 1] = -1;

    //invalidate root file
    [ROOT_FILE + inode_table_i*8 + 0] = -1;

    //release lock
    multipush(R1,R2,R3,R4,R5,R9);
    R1=RELEASE_INODE;//FN NO 5
    R2=inode_table_i;
    R3=[SYSTEM_STATUS_TABLE + 1]; //pid
    call RESOURCE_MANAGER; //MOD 0  
    multipop(R1,R2,R3,R4,R5,R9);
    
    [[R9 + ((userSP-1)/512)*2]*512 + (userSP-1)%512] = 0; //RETURN success
    [pt_sst + 9] = 0; //mode flag
    SP = userSP;//switch to user stack
    ireturn;
endif;